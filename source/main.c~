#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <stdlib.h>
#include <unistd.h>
#include <dirent.h> 
#include <gccore.h>
#include <wiiuse/wpad.h>
#include <fat.h>
#include <sdcard/wiisd_io.h>
#include <di/di.h>
#include <iso9660.h>

#define maxTextSections 7
#define maxDataSections 11

static void *xfb = NULL;
static GXRModeObj *rmode = NULL;

typedef struct _item
{
        char name[255];
        char labl[255];
        int  size;
} item;

typedef struct _fatdev
{
        char name[30];
        char root[4];
        const DISC_INTERFACE *io;
} fatdev;

typedef struct _dolheader 
{
	u32 textoff [maxTextSections];
	u32 dataoff [maxDataSections];
	u32 textmem [maxTextSections];
	u32 datamem [maxDataSections];
	u32 textsize[maxTextSections];
	u32 datasize[maxDataSections];
	u32 bssmem;
	u32 bsssize;
	u32 entry;
} dolheader;

static fatdev devlst[] = {
                        {"Internal SD", "sd", &__io_wiisd},
                        {"Usb stick", "usb", &__io_usbstorage},
                        {"Data DVD (requires DVDX)", "dvd", NULL}
                         };

static fatdev * inuse = NULL;
static item * list = NULL; /* Global list of files. */
static int  fCount = 0;    /* Files count.          */
static char bPath[512];    /* Browsing path.        */

#define maxdev        (sizeof(devlst) / sizeof(fatdev))
#define matchStr(x,y) ((strcmp(x,y) == 0) ? 1 : 0)
#define printItm(i,s) (printf("\t %s %s\n", (s == 0) ? "  " : "::", i))

void getFiles ()
{
        int index;
        char name[255];

        DIR_ITER *iter = diropen(bPath);
        struct stat fstat;

        if (list != NULL)
        {
                free(list);
                list = NULL;
                fCount = 0;
        }

        list = malloc(sizeof(item));

        if (iter == NULL)
        {
                return;
        }

        index = 0;

        while (dirnext(iter, name, &fstat) == 0)
        {
                list = realloc(list, sizeof(item) * (index+1));
                memset(&(list[index]), 0, sizeof(item));
                sprintf(list[index].name, "%s", name);
                printf("\t :: %s\n", list[index].name);
                if ((fstat.st_mode & _IFDIR) == 0)
                {
                        list[index].size = 0;
                }
                else
                {
                        list[index].size = fstat.st_size;
                }
                if (matchStr(list[index].name, ".."))
                {
                        sprintf(list[index].labl, "Parent directory");
                }
                else
                {
                        sprintf(list[index].labl, "%s", list[index].name);
                }
                index++;
        }

        printf("Close dir now\n");
        sleep(10);
        
        dirclose(iter);

        fCount = index;
}

void setDevice (fatdev device)
{
        printf("\t :: DEBUG -> %s called\n", __FUNCTION__);
        sleep(5);

        if (inuse != NULL)
        {
                printf("\t :: DEBUG -> Unmount this first\n");
                sleep(5);
                if (matchStr(inuse->root, "dvd"))
                {
                        ISO9660_Unmount();
                }
                else
                {
                        fatUnmount(inuse->root);
                }
                if (inuse->io != NULL)
                {
                        inuse->io->shutdown();
                }
                inuse = NULL;
        }

        printf("\t :: DEBUG -> %s skipped the unmount\n", __FUNCTION__);
        sleep(5);

        if (matchStr(device.root, "dvd"))
        {
                u32 driveRegister = 0;
                int timer = 0; /* Pretty way of waiting 10 seconds for the user to insert a dvd. */
                DI_Reset();
                while ((driveRegister & DVD_COVER_DISC_INSERTED) != 1)
                {
                       if (timer == 10)
                       {
                               printf("\t :: DEBUG -> No disc in the drive\n");
                               return;
                       }
                       sleep(2);
                       timer++;
                       DI_GetCoverRegister(&driveRegister);
                       printf("\t :: DEBUG -> Timer ticks %i\n", timer);
                }
                DI_Mount();
                while (DI_GetStatus() & DVD_INIT);                
                if (DI_GetStatus() & DVD_READY)
                {
                        if (!ISO9660_Mount())
                        {
                                printf("\t :: Cannot mount the DVD.\n");
                                return;
                        }
                }
                inuse = &device;
        }
        else
        {
                printf("\t :: DEBUG -> Its not a dvd\n");
                sleep(5);
                device.io->startup();

                if (!device.io->isInserted)
                {
                        device.io->shutdown();
                        return;
                }

                inuse = &device;

                fatMount(inuse->root, inuse->io, 0, 8, 512);
        }

        memset(&bPath, 0, 512);
        sprintf(bPath, "%s:/", inuse->root);
        getFiles();
}

void updatePath (char *update)
{
        if (matchStr(update, "."))
        {
                return;
        }
        else if (matchStr(update, ".."))
        {
                char * lastSlash = strrchr(bPath, '/');
                if (lastSlash == NULL)
                {
                        return;
                }
                *lastSlash = 0;
        }
        else
        {
                sprintf(bPath, "%s/%s", bPath, update);
        }

        getFiles();
}

int validateHeader(u8 *buffer)
{
    if (buffer[0] == 0x0 &&
        buffer[1] == 0x0 &&
        buffer[2] == 0x1 &&
        buffer[3] == 0x0)
    {
        return 1;
    }
    
    if (buffer[0] == 'E' &&
        buffer[1] == 'L' &&
        buffer[3] == 'F')
    {
        return 0;
    }

    return 2;
}

u32 relocateDol(u8 *buffer)
{
        int loop;
        dolheader *hdr = (dolheader *)buffer;
        memset((void *)hdr->bssmem, 0, hdr->bsssize);
        for (loop = 0; loop < maxTextSections; loop++)
        {
                memcpy((void *)hdr->textmem[loop], buffer + hdr->textoff[loop], hdr->textsize[loop]);
        }
        for (loop = 0; loop < maxDataSections; loop++)
        {
                memcpy((void *)hdr->datamem[loop], buffer + hdr->dataoff[loop], hdr->datasize[loop]);
        }
        return hdr->entry;
}        

void __initializeVideo()
{
	VIDEO_Init();
	rmode = VIDEO_GetPreferredMode(NULL);
	xfb = MEM_K0_TO_K1(SYS_AllocateFramebuffer(rmode));
	CON_Init(xfb, 60, 60, rmode->fbWidth, rmode->xfbHeight, rmode->fbWidth*VI_DISPLAY_PIX_SZ);
	VIDEO_Configure(rmode);
	VIDEO_SetNextFramebuffer(xfb);
	VIDEO_SetBlack(FALSE);
	VIDEO_Flush();
	VIDEO_WaitVSync();
	if(rmode->viTVMode&VI_NON_INTERLACE) VIDEO_WaitVSync();

	printf("\x1b[2;0H");
}	

int main(int argc, char **argv) 
{
        int device = 2;
	int p = 0;
	int f = 0;
	int i = 0;

        DI_Init();

	__initializeVideo();
	WPAD_Init();

        printf("\t :: loadMii 0.4 - REBiRTH\n");
	
	setDevice(devlst[device]);
        	
        while (1)
        {
                WPAD_ScanPads();

                printf("\x1b[10;0H");
                printf("\t :: [%s]\n", bPath);

                if (WPAD_ButtonsDown(0) & WPAD_BUTTON_UP && i > 0)
                {
                        i--;
                }

                if (WPAD_ButtonsDown(0) & WPAD_BUTTON_DOWN && i < p)
                {
                        i++;
                }

                if (WPAD_ButtonsDown(0) & WPAD_BUTTON_PLUS && device < maxdev)
                {
                        device++;
                        setDevice(devlst[device]);
                }

                if (WPAD_ButtonsDown(0) & WPAD_BUTTON_MINUS && device > 0)
                {
                        device--;
                        setDevice(devlst[device]);
                }

                if (WPAD_ButtonsDown(0) & WPAD_BUTTON_HOME)
                {
                         exit(0);
                }

                for (p=i;p<10 + i;p++)
	        {
		        if (f - p == 0)
		        {
			        break;
		        }
		        if (list[p].size == 0)
		        {
			        printItm(list[p].name, (p == i) ? 1 : 0);
		        }
		        else
		        {
			        printItm(list[p].name, (p == i) ? 1 : 0);
		        }
	        }
        }		

	return 0;
}
